// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type httpKey struct {
	SrcIp   uint32
	DstIp   uint32
	SrcPort uint16
	DstPort uint16
}

type httpPacket struct {
	Type           uint32
	Method         uint32
	DstIp          uint32
	DstPort        uint16
	_              [2]byte
	SrcIp          uint32
	SrcPort        uint16
	_              [2]byte
	Duration       uint32
	ReqPayloadSize uint32
	RspPayloadSize uint32
	Status         [3]uint8
	_              [1]byte
}

// loadHttp returns the embedded CollectionSpec for http.
func loadHttp() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_HttpBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load http: %w", err)
	}

	return spec, err
}

// loadHttpObjects loads http and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*httpObjects
//	*httpPrograms
//	*httpMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadHttpObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadHttp()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// httpSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type httpSpecs struct {
	httpProgramSpecs
	httpMapSpecs
}

// httpSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type httpProgramSpecs struct {
	SocketFilterHttp *ebpf.ProgramSpec `ebpf:"socket__filter_http"`
}

// httpMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type httpMapSpecs struct {
	FilterIp   *ebpf.MapSpec `ebpf:"filter_ip"`
	Packets    *ebpf.MapSpec `ebpf:"packets"`
	RequestMap *ebpf.MapSpec `ebpf:"request_map"`
}

// httpObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadHttpObjects or ebpf.CollectionSpec.LoadAndAssign.
type httpObjects struct {
	httpPrograms
	httpMaps
}

func (o *httpObjects) Close() error {
	return _HttpClose(
		&o.httpPrograms,
		&o.httpMaps,
	)
}

// httpMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadHttpObjects or ebpf.CollectionSpec.LoadAndAssign.
type httpMaps struct {
	FilterIp   *ebpf.Map `ebpf:"filter_ip"`
	Packets    *ebpf.Map `ebpf:"packets"`
	RequestMap *ebpf.Map `ebpf:"request_map"`
}

func (m *httpMaps) Close() error {
	return _HttpClose(
		m.FilterIp,
		m.Packets,
		m.RequestMap,
	)
}

// httpPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadHttpObjects or ebpf.CollectionSpec.LoadAndAssign.
type httpPrograms struct {
	SocketFilterHttp *ebpf.Program `ebpf:"socket__filter_http"`
}

func (p *httpPrograms) Close() error {
	return _HttpClose(
		p.SocketFilterHttp,
	)
}

func _HttpClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed http_bpfel_x86.o
var _HttpBytes []byte
