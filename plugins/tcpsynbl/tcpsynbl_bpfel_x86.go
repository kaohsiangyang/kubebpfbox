// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64

package tcpsynbl

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type tcpsynblEvent struct {
	Pid           uint32
	MaxAckBacklog uint32
	AckBacklog    uint32
}

// loadTcpsynbl returns the embedded CollectionSpec for tcpsynbl.
func loadTcpsynbl() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_TcpsynblBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load tcpsynbl: %w", err)
	}

	return spec, err
}

// loadTcpsynblObjects loads tcpsynbl and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*tcpsynblObjects
//	*tcpsynblPrograms
//	*tcpsynblMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadTcpsynblObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadTcpsynbl()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// tcpsynblSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type tcpsynblSpecs struct {
	tcpsynblProgramSpecs
	tcpsynblMapSpecs
}

// tcpsynblSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type tcpsynblProgramSpecs struct {
	DoEntry   *ebpf.ProgramSpec `ebpf:"do_entry"`
	DoEntryV6 *ebpf.ProgramSpec `ebpf:"do_entry_v6"`
}

// tcpsynblMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type tcpsynblMapSpecs struct {
	Events *ebpf.MapSpec `ebpf:"events"`
}

// tcpsynblObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadTcpsynblObjects or ebpf.CollectionSpec.LoadAndAssign.
type tcpsynblObjects struct {
	tcpsynblPrograms
	tcpsynblMaps
}

func (o *tcpsynblObjects) Close() error {
	return _TcpsynblClose(
		&o.tcpsynblPrograms,
		&o.tcpsynblMaps,
	)
}

// tcpsynblMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadTcpsynblObjects or ebpf.CollectionSpec.LoadAndAssign.
type tcpsynblMaps struct {
	Events *ebpf.Map `ebpf:"events"`
}

func (m *tcpsynblMaps) Close() error {
	return _TcpsynblClose(
		m.Events,
	)
}

// tcpsynblPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadTcpsynblObjects or ebpf.CollectionSpec.LoadAndAssign.
type tcpsynblPrograms struct {
	DoEntry   *ebpf.Program `ebpf:"do_entry"`
	DoEntryV6 *ebpf.Program `ebpf:"do_entry_v6"`
}

func (p *tcpsynblPrograms) Close() error {
	return _TcpsynblClose(
		p.DoEntry,
		p.DoEntryV6,
	)
}

func _TcpsynblClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed tcpsynbl_bpfel_x86.o
var _TcpsynblBytes []byte
